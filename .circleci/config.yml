version: 2.1
executors:
  dotnet:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:2.2
    environment:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      NUGET_XMLDOC_MODE: skip
  unity:
    docker:
      # https://hub.docker.com/r/gableroux/unity3d/tags
      - image: gableroux/unity3d:2019.1.0f2
jobs:
  # .NET Core, Debug(try to build and test).
  build-test:
    executor: dotnet
    steps:
      - checkout
      - run: dotnet build -c Debug
      - run: dotnet test -c Debug --no-build
  # Unity, create .unitypackage and make IL2CPP headless build and test it.
  build-unity:
    executor: unity
    steps:
      - checkout
      # get activation file, if fail to activate unity, use this key and activate from https://license.unity3d.com/manual
      - run: /opt/Unity/Editor/Unity -quit -batchmode -nographics -logFile -createManualActivationFile || exit 0
      - run: cat Unity_v2019.1.0f2.alf # file name same as image's version
      # get from UNITY_LICENSE envvar(base64 encoded), this file is generated from above manual activation
      - run: echo ${UNITY_LICENSE} | base64 --decode  ${UNITY_LICENSE_BASE64} >> .circleci/Unity_v2018.x.ulf
      - run: /opt/Unity/Editor/Unity -quit -batchmode -nographics -silent-crashes -logFile -manualLicenseFile .circleci/Unity_v2018.x.ulf || exit 0
      # create cli IL2CPP testrunner to bin/tests and run it.
      - run: /opt/Unity/Editor/Unity -quit -batchmode -nographics -silent-crashes -noUpm -logFile -projectPath . -executeMethod Exporter.BuildCliTestLinux
      - run: /bin/tests
      # create .unitypackage
      - run: /opt/Unity/Editor/Unity -quit -batchmode -nographics -silent-crashes -noUpm -logFile -projectPath . -executeMethod Exporter.Export
      - store_artifacts:
          path: ./RandomFixtureKit.unitypackage
          destination: ./RandomFixtureKit.unitypackage
  # .NET Core, Release, create NuGet package and push.
  build-push:
    executor: dotnet
    steps:
      - checkout
      - run: dotnet build -c Release -p:Version=${CIRCLE_TAG}
      - run: dotnet test -c Release --no-build
      - run: dotnet pack ./src/RandomFixtureKit/RandomFixtureKit.csproj -c Release --no-build -p:Version=${CIRCLE_TAG}
      - store_artifacts:
          path: ./src/RandomFixtureKit/bin/Release
          destination: ./.RandomFixtureKit/
      - run: dotnet nuget push ./src/RandomFixtureKit/bin/Release/RandomFixtureKit.${CIRCLE_TAG}.nupkg -s https://www.nuget.org/api/v2/package -k ${NUGET_KEY}
workflows:
  version: 2
  build-and-push:
    jobs:
      - build-test:
          filters:
            tags:
              only: /.*/
      - build-unity:
          filters:
            tags:
              only: /.*/
      - build-push:
          filters:
            tags:
              only: /^\d\.\d\.\d.*/
            branches:
              ignore: /.*/