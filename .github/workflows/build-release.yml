name: Build-Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "tag: git tag you want create. (sample 1.0.0)"
        required: true
      dry-run:
        description: "dry-run: true will never create relase/nuget."
        required: true
        default: false
        type: boolean

env:
  GIT_TAG: ${{ github.event.inputs.tag }}
  DRY_RUN: ${{ github.event.inputs.dry-run }}

jobs:
  update-packagejson:
    uses: Cysharp/Actions/.github/workflows/update-packagejson.yaml@main
    with:
      file-path: ./src/RandomFixtureKit.Unity/Assets/Scripts/RandomFixtureKit/package.json
      tag: ${{ github.event.inputs.tag }}
      dry-run: ${{ fromJson(github.event.inputs.dry-run) }}

  build-dotnet:
    needs: [update-packagejson]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - run: echo ${{ needs.update-packagejson.outputs.sha }}
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.update-packagejson.outputs.sha }}
      - uses: Cysharp/Actions/.github/actions/setup-dotnet@main
        with:
          dotnet-version: |
            3.1.x
            6.0.x
      # pack nuget
      - run: dotnet build -c Release -p:Version=${{ env.GIT_TAG }}
      - run: dotnet test -c Release --no-build -p:Version=${{ env.GIT_TAG }}
      - run: dotnet pack -c Release --no-build -p:Version=${{ env.GIT_TAG }} -o ./publish
      - uses: actions/upload-artifact@v2
        with:
          name: nuget
          path: ./publish

  build-unity:
    needs: [update-packagejson]
    strategy:
      matrix:
        unity: ["2019.3.9f1"]
        include:
          - unity: 2019.3.9f1
            license: UNITY_LICENSE_2019
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.update-packagejson.outputs.sha }}
      # Execute script: UnitTestBuilder.BuildUnitTest
      # /opt/Unity/Editor/Unity -quit -batchmode -nographics -silent-crashes -logFile -projectPath . -executeMethod UnitTestBuilder.BuildUnitTest /headless /ScriptBackend Mono2x /BuildTarget StandaloneLinux64
      - name: Build Windows(Mono)
        uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets[matrix.license] }}
        with:
          projectPath: src/RandomFixtureKit.Unity
          unityVersion: ${{ matrix.unity }}
          targetPlatform: StandaloneLinux64
          buildMethod: UnitTestBuilder.BuildUnitTest
          customParameters: /headless /ScriptBackend Mono2x
          versioning: None
      - name: Execute UnitTest
        run: ./src/RandomFixtureKit.Unity/bin/UnitTest/StandaloneLinux64_Mono2x/test

      # Execute scripts: Export Package
      # /opt/Unity/Editor/Unity -quit -batchmode -nographics -silent-crashes -logFile -projectPath . -executeMethod PackageExporter.Export
      - name: Export unitypackage
        uses: game-ci/unity-builder@v2
        env:
          UNITY_PACKAGE_VERSION: ${{ env.GIT_TAG }}
          UNITY_LICENSE: ${{ secrets[matrix.license] }}
        with:
          projectPath: src/RandomFixtureKit.Unity
          unityVersion: ${{ matrix.unity }}
          targetPlatform: StandaloneLinux64
          buildMethod: PackageExporter.Export
          versioning: None

      - uses: Cysharp/Actions/.github/actions/check-metas@main # check meta files
        with:
          directory: src/RandomFixtureKit.Unity

      # Store artifacts.
      - uses: actions/upload-artifact@v2
        with:
          name: RandomFixtureKit.${{ env.GIT_TAG }}.unitypackage
          path: ./src/RandomFixtureKit.Unity/RandomFixtureKit.${{ env.GIT_TAG }}.unitypackage

  create-release:
    if: github.event.inputs.dry-run == 'false'
    needs: [update-packagejson, build-dotnet, build-unity]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: Cysharp/Actions/.github/actions/setup-dotnet@main
      # Create Release
      - uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.GIT_TAG }}
          release_name: Ver.${{ env.GIT_TAG }}
          commitish: ${{ needs.update-packagejson.outputs.sha }}
          draft: true
          prerelease: false
      # Download (All) Artifacts to current directory
      - uses: actions/download-artifact@v2
      # Upload to NuGet
      - run: dotnet nuget push "./nuget/*.nupkg" -s https://www.nuget.org/api/v2/package -k ${{ secrets.NUGET_KEY }}
      # Upload to Releases(unitypackage)
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./RandomFixtureKit.${{ env.GIT_TAG }}.unitypackage/RandomFixtureKit.${{ env.GIT_TAG }}.unitypackage
          asset_name: RandomFixtureKit.${{ env.GIT_TAG }}.unitypackage
          asset_content_type: application/octet-stream

  cleanup:
    if: needs.update-packagejson.outputs.is-branch-created == 'true'
    needs: [update-packagejson, build-unity]
    uses: Cysharp/Actions/.github/workflows/clean-packagejson-branch.yaml@main
    with:
      branch: ${{ needs.update-packagejson.outputs.branch-name }}
