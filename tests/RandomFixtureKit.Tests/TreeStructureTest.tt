<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
	var collectionTypeNames = new[] {
        "ArraySegment",
        "List",
        "LinkedList",
        "Stack",
        "Queue",
        "ConcurrentQueue",
        "ConcurrentStack",
        "ICollection",
        "IEnumerable",
        "IList",
        "IReadOnlyCollection",
        "IReadOnlyList",
	};

    var dictionaryTypeNames = new[] {
        "Dictionary",
        "SortedDictionary",
        "SortedList",
        "IDictionary",
        "IReadOnlyDictionary"
    };
#>
using System;
using FluentAssertions;
using System.Collections.Generic;
using System.Text;
using Xunit;
using System.Linq;
using System.Collections.Concurrent;
using System.Threading.Tasks;

namespace RandomFixtureKit.Tests
{
    public class TreeStructureTest
    {
        [Fact]
        public void CheckArray()
        {
            FixtureFactory.Create<ArrayTreeNode>();
        }

        <# foreach(var typeName in collectionTypeNames.Concat(dictionaryTypeNames)) { #>
[Fact]
        public void Check<#=typeName#>() {
            FixtureFactory.Create<<#=typeName#>TreeNode>();
        }

        <# } #>}


    class ArrayTreeNode
    {
        public string Name { get; set; }
        public ArrayTreeNode[] Children { get; set; }
    }

    <# foreach(var typeName in collectionTypeNames) { #>

    class <#=typeName#>TreeNode {
        public string Name { get; set; }
        public <#=typeName#><<#=typeName#>TreeNode> Children { get; set; }
    }
    <# } #>

    <# foreach(var typeName in dictionaryTypeNames) { #>

    class <#=typeName#>TreeNode {
        public string Name { get; set; }
        public <#=typeName#><string, <#=typeName#>TreeNode> Children { get; set; }
    }
    <# } #>
}
